# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FindCraters
                                 A QGIS plugin
 Find Craters in a selected layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-25
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Cristina Luna
        email                : cristina.luna@live.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Import OpenCV
import opencv-python as cv2

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .find_craters_dialog import FindCratersDialog
import os.path


class FindCraters:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FindCraters_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FindCraters')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FindCraters', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/find_craters/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Find Craters'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&FindCraters'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        # Get the active layer
        layer = self.iface.activeLayer()

        if not layer:
            # Display an error message if no layer is selected
            self.iface.messageBar().pushMessage("Error", "No layer selected", level=3)
            return

        # Check if the active layer is a raster layer
        if layer.type() == QgsMapLayer.RasterLayer:
            raster = layer.dataProvider()
            width = raster.xSize()
            height = raster.ySize()

            # Get raster data as a block
            block = layer.dataProvider().block(1, layer.extent(), width, height)

            # Convert raster data to an OpenCV-compatible format
            array = block_to_numpy(block)
            image = cv2.cvtColor(array, cv2.COLOR_GRAY2BGR)

            # Detect craters (circles) in the image
            craters = detect_craters(array)

            # Highlight detected craters on the image
            if craters is not None:
                craters = np.uint16(np.around(craters))
                for crater in craters[0, :]:
                    # Draw the outer circle
                    cv2.circle(image, (crater[0], crater[1]), crater[2], (0, 255, 0), 2)
                    # Draw the circle center
                    cv2.circle(image, (crater[0], crater[1]), 2, (0, 0, 255), 3)

            # Display the resulting image with highlighted craters
            cv2.imshow('Detected Craters', image)
            cv2.waitKey(0)
            cv2.destroyAllWindows()
        else:
            # Display an error message if the layer is not a raster layer
            self.iface.messageBar().pushMessage("Error", "Selected layer is not a raster layer", level=3)


    def block_to_numpy(block):
        """
        Convert a QgsRasterBlock to a NumPy array.
        
        Parameters:
            block (QgsRasterBlock): Raster block containing pixel data.

        Returns:
            np.ndarray: NumPy array representation of the raster block.
        """
        import numpy as np
        cols = block.width()
        rows = block.height()
        array = np.zeros((rows, cols), dtype=np.uint8)

        for i in range(rows):
            for j in range(cols):
                array[i, j] = block.value(i, j)
        return array


    def detect_craters(gray_image):
        """
        Detect craters in a grayscale image using the Hough Circle Transform.

        Parameters:
            gray_image (np.ndarray): Grayscale image containing potential craters.

        Returns:
            circles (np.ndarray): Array of detected circles, where each circle is 
                                represented as (x_center, y_center, radius).
        """
        # Apply a median blur to reduce noise
        blurred = cv2.medianBlur(gray_image, 5)

        # Detect circles using the Hough Circle Transform
        circles = cv2.HoughCircles(
            blurred,
            cv2.HOUGH_GRADIENT,
            dp=1.2,          # Inverse ratio of the accumulator resolution to the image resolution
            minDist=20,      # Minimum distance between circle centers
            param1=50,       # Upper threshold for the Canny edge detector
            param2=30,       # Accumulator threshold for circle detection
            minRadius=10,    # Minimum radius of detected circles
            maxRadius=100    # Maximum radius of detected circles
        )
        return circles